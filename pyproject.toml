[project]
name = "mcp-server-openmetadata"
version = "0.3.0"
description = "Model Context Protocol (MCP) server for OpenMetadata with virtual environment support"
authors = [{ name = "Ingestion", email = "me@newrelic.com" }]
dependencies = [
    # Core MCP and HTTP
    "mcp>=1.2.1",
    "httpx[http2]>=0.28.1",
    "click>=8.1.8",
    "anyio>=4.8.0",
    # OpenMetadata client
    "openmetadata-ingestion>=1.6.1",
    # Configuration and utilities
    "pydantic>=2.10.6",
    "python-dotenv>=1.0.1",
    "pip>=25.1.1",
]
requires-python = ">=3.10"
readme = "README.md"
license = { text = "MIT" }
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
keywords = ["mcp", "openmetadata", "metadata", "model-context-protocol", "data-catalog"]

[project.optional-dependencies]
# Web server features (optional for remote access)
web = [
    "fastapi>=0.115.6",
    "uvicorn>=0.32.1",
    "starlette>=0.45.3",
    "websockets>=14.1",
    "jinja2>=3.1.5",
    "aiofiles>=24.1.0",
]

# Authentication features (optional for security)
auth = [
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.19",
    "cryptography>=44.0.0",
    "bcrypt>=4.2.1",
    "google-auth-oauthlib>=1.2.0",
]

# Monitoring features (optional for production)
monitoring = [
    "sentry-sdk[fastapi]>=2.19.2",
    "structlog>=25.1.0",
]

# All optional features combined
all = [
    "mcp-server-openmetadata[web,auth,monitoring]",
]

# Development tools
dev = [
    "build>=1.2.2.post1",
    "twine>=6.1.0", 
    "ruff>=0.9.6",
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.scripts]
mcp-server-openmetadata = "src.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src"]
exclude = ["**/__pycache__", "**/*.py[cod]", "**/*.so"]

[tool.hatch.build]
include = ["src/**/*.py", "README.md", "LICENSE"]
exclude = ["**/__pycache__", "**/*.py[cod]", "**/*.so"]

[tool.ruff]
line-length = 120
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
]

[tool.ruff.lint.isort]
known-first-party = ["src"]
combine-as-imports = true
force-sort-within-sections = true

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"src/auth.py" = ["B008"]  # FastAPI Depends() in function arguments is standard
"src/remote_server.py" = ["B008", "C901"]  # FastAPI patterns and app setup complexity
"src/main.py" = ["C901"]  # CLI parsing and server setup complexity

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"
